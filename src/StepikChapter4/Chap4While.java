package StepikChapter4;
import java.util.*;
public class Chap4While {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
/*
Цикл - это фундаментальная концепция программирования.
Циклы позволяют исполнять некоторый блок команд многократно без дублирования кода.

Java предоставляет несколько видов циклических конструкций.
Цикл while исполняет блок команд (называемый также телом цикла) до тех пор, пока истинно указанное в цикле условие.
1. Вначале необходимо объявить цикл с помощью ключевого слова while.

2. Далее в круглых скобках располагается условие выполнения цикла, в нашем примере это (x > 0).
Условие должно возвращать логическое значение, то есть, false или true.

3. Исполняемый циклом блок команд располагается в фигурных скобках.

4. Внутри фигурных скобок каждая строка, как обычно, обязательно завершается точкой с запятой.
После фигурных скобок точка с запятой не нужна. Отступы также не важны с точки зрения кода,
однако их соблюдение делает код более удобным и читаемым.

5. Необходимо обязательно предусмотреть условие выхода из цикла, иначе код будет исполняться бесконечно,
то есть до переполнения памяти. В нашем примере таким условием является декремент переменной х:
с каждой итерацией цикла значение переменной х уменьшается на единицу, и,
рано или поздно, оно перестанет удовлетворять условию x > 0.

Когда условие цикла становится ложным ( т. е. возвращает false),
исполнение цикла прекращается и программа переходит к исполнению первой после цикла строки.


На вход подаётся натуральное число n.
Выведите на печать числа от единицы до введённого числа включительно, каждое на новой строке.

int x = sc.nextInt();
        int y = 1;

        while (y <= x) {
            System.out.println(y);
            y ++;
        }


На ввод подаётся натуральное число n.
Выведите на печать в возрастающем порядке через пробел квадраты натуральных чисел, если эти квадраты не превышают n.

 int x = sc.nextInt();
        int y = 1;

        while (y*y <= x) {
            System.out.print(y*y + " ");
            y ++;
        }

Считайте со ввода последовательность целых чисел. Последовательность оканчивается числом 0.

Выведите на печать сумму введённых чисел.

 int x = sc.nextInt();
        int y = 0;

      while (x != 0) {
            y = y + x;
            x = sc.nextInt();
            }

На вход подаётся последовательность слов. Посчитайте общее количество введённых слов.

Примечание. Так как маркер конца последовательности в этой задаче отсутствует,
будет удобно воспользоваться методом hasNext(). Найдите самостоятельно, как он работает.

int count = 0;

        while (sc.hasNext()) {
            String word = sc.next();
            count++;
            }
        System.out.print(count);

  В дополнение к циклу while существует также циклическая конструкция do ... while.
   Она отличается от "обычного" цикла лишь тем, что проверка условия происходит не в начале,
   а в конце тела цикла. Таким образом, тело цикла исполняется, как минимум, один раз.

 Break и continue

Иногда бывает нужно вмешаться в работу цикла и изменить его работу.
Для этой цели есть команды break и continue. Команда break немедленно прерывает работу цикла
(исполнение программы переходит к командам, расположенным после цикла),
а команда continue завершает текущую итерацию (цикл переходит к исполнению следующей итерации).

Завершите программу таким образом, чтобы она вывела числа от 1 до 5, каждое на новой строке.

 int x = 1;
        do {
            System.out.println(x);
            x++;
        } while (x < 6);

 На вход подаются числа, которые делятся на 11. Концом последовательности будет любое число,
 не делящееся на 11 (это число не входит в последовательность).

Посчитайте количество введённых чисел и сумму тех из них, которые кратны 3.

int SummOfTree = 0, digit = sc.nextInt(), count = 0;

while (digit % 11 == 0) {
    count ++;
    digit = sc.nextInt();
        if (digit % 3 == 0) {
        SummOfTree += digit;
        digit = sc.nextInt();
        count ++;
    }

}
System.out.println(count);
System.out.println(SummOfTree);

На вход подаётся последовательность чисел от нуля до 10, являющихся рейтингами фильма,
выставленными зрителями. Если входящее число отрицательное или больше 10, последовательность прерывается.

Посчитайте среднюю оценку фильма.

int Score = sc.nextInt(), count = 0;
        double rating = 0;

        while (Score >= 0 && Score <= 10) {
            if (Score > 10 || Score < 0 ) continue;
            rating += Score;
            count ++;
            Score = sc.nextInt();

        }
System.out.println(rating / count);

На вход подаётся натуральное число. Выведите на печать составляющие его цифры в обратном порядке.

String number = sc.next();
        int x = number.length();
        int y = 0;


    do {
        char letter = number.charAt(x-1);
        System.out.print(letter);
        x --;
    }
    while (x > y);

    На вход подаётся строка с двумя буквами, а затем - строка, состоящая из слов.
    Выведите на печать все слова, которые начинаются на буквы, идущие по алфавиту между буквами
    с первой строки (включительно). Вывести слова необходимо в том же порядке, в котором они подаются на вход.

String words1 = sc.nextLine();

        int x1 = words1.charAt(0), x2 = words1.charAt(2);

        while (sc.hasNext()) {
            String words2 = sc.next();
            int x3 = words2.charAt(0);

            if (x3 <= x2 && x3 >= x1)
                System.out.println(words2);
        }









  */
    } // main end
} // class end
